// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using finalAPI.Data;

namespace finalAPI.Migrations
{
    [DbContext(typeof(finalAPIContext))]
    [Migration("20221209140737_NomMigration")]
    partial class NomMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("finalAPI.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThreadId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Message");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Text = "It's incredible. Delay, after delay, after delay, after delay. This game is never gonna come out and my son needs it ! Does anyone know where is the cyberpunk 2077 manager ?",
                            ThreadId = 1,
                            UserId = "11111111-1111-1111-111111111113"
                        },
                        new
                        {
                            Id = 2,
                            Text = "Karen, the game is out since december 2020... Anyway, do your son a favor and tell him the developers cancelled the project.",
                            ThreadId = 1,
                            UserId = "11111111-1111-1111-111111111111"
                        },
                        new
                        {
                            Id = 3,
                            Text = "Does anyone know where is the manager on bluedit ? I had terrible service so far. Most people here aare so entitled. Those millenials, I tell you.",
                            ThreadId = 2,
                            UserId = "11111111-1111-1111-111111111113"
                        },
                        new
                        {
                            Id = 4,
                            Text = "Okay, hear me out. If a gingerbread man is standing in a gingerbread house, is he made of house or is the house made of flesh ? Plz help me out on this one I haven't slept for 3 days.",
                            ThreadId = 3,
                            UserId = "11111111-1111-1111-111111111111"
                        },
                        new
                        {
                            Id = 5,
                            Text = "For god's sake Chad what did you take and where can I get some ?",
                            ThreadId = 3,
                            UserId = "11111111-1111-1111-111111111112"
                        });
                });

            modelBuilder.Entity("finalAPI.Models.Thread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Thread");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "When does Cyberpunk 2077 release ??"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Where is the manager ?!"
                        },
                        new
                        {
                            Id = 3,
                            Title = "The Gingerbread Man Dilemma"
                        });
                });

            modelBuilder.Entity("finalAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "971a72dd-0e9f-4e85-a45f-4dcbf20ee085",
                            Email = "chad@chad.chad",
                            EmailConfirmed = false,
                            FileName = "5e27b508-7ed6-41ad-bac4-6f266d96ee80.png",
                            LockoutEnabled = false,
                            MimeType = "image/png",
                            NormalizedEmail = "CHAD@CHAD.CHAD",
                            NormalizedUserName = "CHAD",
                            PasswordHash = "AQAAAAEAACcQAAAAEBKvBWhf6rI+Gy0mNoO4viZAYm1/OKU/fL1FxcX4jn0N1Lvbm7wYxhB7KU01tu6hxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8fccc3c-f70c-44ed-91ee-de4162ef2dbd",
                            TwoFactorEnabled = false,
                            UserName = "chad"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-111111111112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c44e09cc-0871-4be2-914c-c2a88d970e1c",
                            Email = "stacy@stacy.stacy",
                            EmailConfirmed = false,
                            FileName = "c73529a7-63f3-4dc0-8d12-356c93a4e924.png",
                            LockoutEnabled = false,
                            MimeType = "image/png",
                            NormalizedEmail = "STACY@STACY.STACY",
                            NormalizedUserName = "STACY",
                            PasswordHash = "AQAAAAEAACcQAAAAEBx0WeMhW5OqKm8As79FuSkoNLyzs1fepeV8fYbtf7QLi5NcHrxIG9o0Xvv5QG3rBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e7c71fa-f929-478d-95e7-052dc97265a2",
                            TwoFactorEnabled = false,
                            UserName = "stacy"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-111111111113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "962846de-0b3c-4ef4-ac76-c6a2ee575ee2",
                            Email = "karen@karen.karen",
                            EmailConfirmed = false,
                            FileName = "1dda9998-c27b-4acf-807d-b75b95cbe57d.png",
                            LockoutEnabled = false,
                            MimeType = "image/png",
                            NormalizedEmail = "KAREN@KAREN.KAREN",
                            NormalizedUserName = "KAREN",
                            PasswordHash = "AQAAAAEAACcQAAAAECR6rSXzxEMMmwaFHM0EAHkHeKfLVVAAwfm97TyNAO0hhD4HtipipD6jD+CORt6pAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbaecfad-fe2f-46b6-a71c-713134f4d5f1",
                            TwoFactorEnabled = false,
                            UserName = "karen"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("finalAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("finalAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("finalAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("finalAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("finalAPI.Models.Message", b =>
                {
                    b.HasOne("finalAPI.Models.Thread", "Thread")
                        .WithMany("Messages")
                        .HasForeignKey("ThreadId");

                    b.HasOne("finalAPI.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId");

                    b.Navigation("Thread");

                    b.Navigation("User");
                });

            modelBuilder.Entity("finalAPI.Models.Thread", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("finalAPI.Models.User", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
